version: '3.8'

services:
  # 账号管理服务
  account-service:
    build:
      context: ./account-service
      dockerfile: Dockerfile
    ports:
      - "8001:8000"
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=account_db
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres/account_db
      - PROXY_SERVICE_URL=http://proxy-service:8000
    depends_on:
      - postgres
    networks:
      - xget-network
    restart: unless-stopped

  # 代理管理服务
  proxy-service:
    build:
      context: ./proxy-service
      dockerfile: Dockerfile
    ports:
      - "8002:8000"
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=proxy_db
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres/proxy_db
    depends_on:
      - postgres
    networks:
      - xget-network
    restart: unless-stopped

  # 数据采集服务
  scraper-service:
    build:
      context: ./scraper-service
      dockerfile: Dockerfile
    ports:
      - "8003:8000"
    environment:
      - DEBUG=false
      - LOG_LEVEL=INFO
      - POSTGRES_SERVER=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=scraper_db
      - DATABASE_URL=postgresql+asyncpg://postgres:postgres@postgres/scraper_db
      - MONGODB_URI=mongodb://mongodb:27017/scraper
      - KAFKA_BOOTSTRAP_SERVERS=kafka:9092
      - ACCOUNT_SERVICE_URL=http://account-service:8000
      - PROXY_SERVICE_URL=http://proxy-service:8000
    depends_on:
      - postgres
      - mongodb
      - kafka
    networks:
      - xget-network
    restart: unless-stopped

  # PostgreSQL数据库
  postgres:
    image: postgres:16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./db/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - xget-network
    restart: unless-stopped

  # MongoDB数据库
  mongodb:
    image: mongo:7
    ports:
      - "27017:27017"
    volumes:
      - mongodb-data:/data/db
    networks:
      - xget-network
    restart: unless-stopped

  # Kafka消息队列
  kafka:
    image: bitnami/kafka:3.5
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - KAFKA_CFG_INTER_BROKER_LISTENER_NAME=PLAINTEXT
      - KAFKA_CFG_ADVERTISED_LISTENERS=PLAINTEXT://kafka:9092
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@kafka:9093
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka-data:/bitnami/kafka
    networks:
      - xget-network
    restart: unless-stopped

networks:
  xget-network:
    driver: bridge

volumes:
  postgres-data:
  mongodb-data:
  kafka-data:
